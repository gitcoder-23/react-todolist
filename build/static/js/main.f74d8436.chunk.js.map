{"version":3,"sources":["ListItems.js","App.js","reportWebVitals.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","type","id","key","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAyCeA,MAlCf,SAAoBC,GAChB,IACMC,EADQD,EAAME,MACIC,KAAK,SAAAC,GAEzB,OACA,qBAAKC,UAAY,OAAjB,SACI,8BACA,uBAAOC,KAAK,OAAOC,GAAIH,EAAKI,IAAKC,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC7DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKI,QAEjC,+BACJ,cAAC,IAAD,CAAiBH,UAAU,UAAWU,KAAK,QAC3CC,QAAW,WACPhB,EAAMiB,WAAWb,EAAKI,cARDJ,EAAKI,QAmBtC,OACI,8BACE,cAAC,IAAD,CAAUU,SAAU,IAAKC,OAAQ,cAAjC,SACKlB,O,eC1BfmB,IAAQC,IAAIC,K,IAqHGC,E,kDAjHb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IAEDwB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNF,IAAK,KAOT,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAjBD,E,+CAyBlB,SAAYf,GACViB,KAAKC,SAAS,CAEZL,YAAa,CACXf,KAAME,EAAEE,OAAOL,MACfD,IAAKuB,KAAKC,W,qBAOhB,SAAQpB,GAENA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAG3B,GAFAU,QAAQC,IAAIF,GAEO,KAAhBA,EAAQxB,KAAW,CAGpB,IAAM2B,EAAQ,sBAAOR,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACZ5B,MAAOmC,EACPZ,YAAa,CACXf,KAAM,GACNF,IAAK,S,wBASb,SAAWA,GAGT,IAAM8B,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAAIA,EAAKI,MAAOA,KAElEqB,KAAKC,SAAS,CACZ5B,MAAOoC,M,uBAOX,SAAU5B,EAAMF,GACd,IAAMN,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKI,MAAQA,IACdJ,EAAKM,KAAOA,MAKhBmB,KAAKC,SAAS,CACZ5B,MAAOA,M,oBASX,WAEE,OACE,sBAAKG,UAAU,MAAf,UACE,mCACE,oBAAIA,UAAU,UAAd,8BACF,uBAAME,GAAG,aAAaiC,SAAUX,KAAKD,QAArC,UACE,uBAAOtB,KAAK,OAAOmC,YAAY,aAC/BhC,MAAOoB,KAAKL,MAAMC,YAAYf,KAC9BC,SAAUkB,KAAKH,cACf,wBAAQpB,KAAK,SAAb,uBAIJ,cAAC,EAAD,CAAWJ,MAAS2B,KAAKL,MAAMtB,MAC/Be,WAAcY,KAAKZ,WACnBJ,UAAagB,KAAKhB,UAFlB,uB,GA5GY6B,IAAMC,WCETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f74d8436.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// flip animation\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nfunction ListItems (props) {\r\n    const items = props.items;\r\n    const listItems = items.map (item => {\r\n\r\n        return (\r\n        <div className = \"list\" key={item.key}>\r\n            <p>\r\n            <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\r\n             props.setUpdate(e.target.value,item.key)}}/>\r\n                \r\n                <span>\r\n            <FontAwesomeIcon className=\"faicons\"  icon=\"trash\"\r\n            onClick= { () => {\r\n                props.deleteItem(item.key)\r\n            }} />\r\n            </span>\r\n            \r\n            </p>\r\n            \r\n        </div>\r\n        )\r\n\r\n    })\r\n\r\n    return (\r\n        <div>\r\n          <FlipMove duration={300} easing= \"ease-in-out\">\r\n              {listItems}\r\n        </FlipMove>  \r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ListItems;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    // state has two variables\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n\n    // handler are binded here\n    // to type input field remove error bind handle input\n    \n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    \n\n  }\n\n\n \n\n  handleInput(e) {\n    this.setState({\n      // variable set here\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    });\n  };\n\n \n// add ops\n  addItem(e) {\n    // to stop page refreshing/loading after submit\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n\n    if(newItem.text !==\"\"){\n\n      // Destructuring Assignment\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n\n      })\n    }\n\n  };\n\n  // delete ops\n  deleteItem(key) {\n\n    // all the items match by .filter\n    const filteredItems = this.state.items.filter(item => item.key!== key);\n\n    this.setState({\n      items: filteredItems,\n    })\n\n  };\n\n\n  // Edit ops\n  setUpdate(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key) {\n        item.text = text;\n\n      }\n    })\n\n    this.setState({\n      items: items,\n    })\n\n  };\n\n    \n  \n\n\n  render () {\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h2 className=\"headcss\">React To Do List</h2>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter Text\"\n          value={this.state.currentItem.text}\n          onChange={this.handleInput}/>\n          <button type=\"submit\">Add</button>\n        </form>\n      </header>\n\n      <ListItems items = {this.state.items}\n      deleteItem = {this.deleteItem}\n      setUpdate = {this.setUpdate}>  </ListItems>\n      </div>\n    );\n  };\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}